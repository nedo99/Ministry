package ba.nwt.ministarstvo.server;

import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;


import com.smartgwt.client.widgets.calendar.CalendarEvent; 
import ba.nwt.ministarstvo.client.GreetingService;
import ba.nwt.ministarstvo.shared.FieldVerifier;
import ba.nwt.ministarstvo.shared.Kalendar;
import ba.nwt.ministarstvo.shared.Korisnik;
import ba.nwt.ministarstvo.shared.Novost;
import ba.nwt.ministarstvo.shared.Novosti;
import ba.nwt.ministarstvo.shared.Preporuci;


import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;



/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class GreetingServiceImpl extends RemoteServiceServlet implements
		GreetingService {
	private Connection c=null;
	public String greetServer(String input) throws IllegalArgumentException {
		// Verify that the input is valid. 
		if (!FieldVerifier.isValidName(input)) {
			// If the input is not valid, throw an IllegalArgumentException back to
			// the client.
			throw new IllegalArgumentException(
					"Name must be at least 4 characters long");
		}

		String serverInfo = getServletContext().getServerInfo();
		String userAgent = getThreadLocalRequest().getHeader("User-Agent");

		// Escape data from the client to avoid cross-site script vulnerabilities.
		input = escapeHtml(input);
		userAgent = escapeHtml(userAgent);

		return "Hello, " + input + "!<br><br>I am running " + serverInfo
				+ ".<br><br>It looks like you are using:<br>" + userAgent;
	}

	/**
	 * Escape an html string. Escaping data received from the client helps to
	 * prevent cross-site script vulnerabilities.
	 * 
	 * @param html the html string to escape
	 * @return the escaped string
	 */
	private String escapeHtml(String html) {
		if (html == null) {
			return null;
		}
		return html.replaceAll("&", "&amp;").replaceAll("<", "&lt;")
				.replaceAll(">", "&gt;");
	}

	@Override
	public String Konektujse() {
		String vrati="Konekcija uspjela";
		try {
			Class.forName ("com.mysql.jdbc.Driver").newInstance ();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			c = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/nwt", "root", "niko");
		} catch (SQLException e) {
			vrati=e.getMessage();
			e.printStackTrace();
		}
		return vrati;
	}
	
	public int brojkorisnika(){
		Konektujse();
		int broj=0;
		PreparedStatement ps;
		try {
			ps = (PreparedStatement) c.prepareStatement("SELECT COUNT(*) FROM clanovi");
		
		ResultSet rs=ps.executeQuery();
		while(rs.next())
			broj=rs.getInt(1);
		}
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return broj;
	}
	public Korisnik login(String user, String pass){
		Boolean tacan=null;
		Korisnik k=null;
		Konektujse();
		try{
			PreparedStatement ps = (PreparedStatement) c.prepareStatement("SELECT clan_id, tip FROM korisnici WHERE user=? AND pass=?");
			ps.setString(1, user);
			ps.setString(2, pass);
			int broj=0;
			String tip="";
			ResultSet rs=(ResultSet) ps.executeQuery();
			while(((java.sql.ResultSet) rs).next()){
				broj=((java.sql.ResultSet) rs).getInt(1);
				tip=rs.getString(2);
			}
			if(broj!=0){
				ps = (PreparedStatement) c.prepareStatement("SELECT * FROM clanovi WHERE id=?");
				ps.setInt(1, broj);
				rs=(ResultSet) ps.executeQuery();
				while(((java.sql.ResultSet) rs).next()){
					k=new Korisnik();
					int id=rs.getInt(1);
					String ime=rs.getString(2);
					String prezime=rs.getString(3);
					String telefon=rs.getString(4);
					String jmbg=rs.getString(5);
					String mail=rs.getString(6);
					String adresa=rs.getString(7);
					String grad=rs.getString(8);
					Date datum_rodj=null;
					Date datum_reg=null;
					datum_rodj=(Date) rs.getDate(9);
					datum_reg=(Date) rs.getDate(10);
					k.Postavi(id, ime, prezime, telefon, jmbg, mail, adresa, grad, datum_rodj, datum_reg, "", "", tip);
				}
			}
		}
		catch(Exception e) {
			
		}
		return k;
		
	}
	
	public Novosti ucitajNovosti(){
		Konektujse();
		Novosti n=new Novosti();
		int broj=0;
		try {
			
			PreparedStatement ps = (PreparedStatement) c.prepareStatement("SELECT * FROM novosti");
			ResultSet rs=ps.executeQuery();
			while(rs.next()){
				
				int id=rs.getInt("id");
				String naziv=rs.getString("naziv");
				String opis=rs.getString("opis");
				Date d=null;
				d=rs.getDate("vrijeme");
				String min=rs.getString("ministarstvo");
				Novost nov=new Novost(id, naziv, opis, d, min);
				n.dodajnovost(nov);
				broj=n.getbroj();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(broj==0)
			n=null;
		return n;
		
	}
	public int brojnovosti(){
		
		int broj=0;
		PreparedStatement ps;
		try {
			ps = (PreparedStatement) c.prepareStatement("SELECT COUNT(*) FROM novosti");
		
		ResultSet rs=ps.executeQuery();
		while(rs.next())
			broj=rs.getInt(1);
		}
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return broj;
	}
	public int[] dajnovostiid(){
		int broj=brojnovosti();
		int[] novosti=new int[broj];
		try{
			PreparedStatement ps = (PreparedStatement) c.prepareStatement("SELECT id FROM novosti");
			ResultSet rs=ps.executeQuery();
			int b=0;
			while(rs.next()){
				novosti[b]=rs.getInt(1);
				b++;
			}
		}
		catch(Exception e){
			
		}
		return novosti;
		
	}
	public Preporuci ProcitaoVijest(int i, int k){
		Konektujse();
		Preporuci p=new Preporuci();
		try{
			PreparedStatement ps = (PreparedStatement) c.prepareStatement("SELECT id FROM slope_one WHERE clan_id=? AND novost_id=?");
			ps.setInt(1, k);
			ps.setInt(2, i);
			ResultSet rs=ps.executeQuery();
			int br=0;
			while(rs.next())
				br++;
			if(br==0){
				PreparedStatement ps1 = (PreparedStatement) c.prepareStatement("INSERT INTO slope_one VALUES(NULL, ?, ?,1)");
				ps1.setInt(1, k);
				ps1.setInt(2, i);
				ps1.execute();
			}
			int broj=brojkorisnika();
			int[] procitano=new int[broj];
			PreparedStatement ps2 = (PreparedStatement) c.prepareStatement("SELECT procitao FROM slope_one WHERE  novost_id=?");
			ps2.setInt(1, i);
			ResultSet rs2=ps2.executeQuery();
			int b=0;
			while(rs2.next()){
				procitano[b]=rs2.getInt(1);
				b++;
			}
			int broj1=brojnovosti();
			int[] novosti=dajnovostiid();
			int[][] sl=new int[broj1][broj+1];
			for(int j=0; j<broj1; j++){
				PreparedStatement ps3 = (PreparedStatement) c.prepareStatement("SELECT procitao FROM slope_one WHERE  novost_id=?");
				ps3.setInt(1, novosti[j]);
				sl[j][0]=novosti[j];
				ResultSet rs3=ps3.executeQuery();
				int duz=1;
				while(rs3.next()){
					sl[j][duz]=rs3.getInt(1);
					duz++;
				}
			}
			
			p.Postavi(procitano, sl);
			
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		return p;
	}
	
	public Kalendar dajkalendar(int id){
		Konektujse();
		Kalendar k=null;
		
		try{
			PreparedStatement ps = (PreparedStatement) c.prepareStatement("SELECT COUNT(*) FROM kalendar WHERE clan_id=?");
			ps.setInt(1, id);
			ResultSet rs=ps.executeQuery();
			int a=0;
			while(rs.next()){
				a=rs.getInt(1);
			}
			k=new Kalendar(a);
			PreparedStatement ps1 = (PreparedStatement) c.prepareStatement("SELECT * FROM kalendar WHERE clan_id=?");
			ps1.setInt(1, id);
			ResultSet rs1=ps1.executeQuery();
			while(rs1.next()){
				
				k.dodaj(rs1.getInt("id"), rs1.getString("naziv"), rs1.getString("opis"), rs1.getTimestamp("od_datum"), rs1.getTimestamp("do_datum"));
				
			}
			
		}
		catch(SQLException e){
			
		}
		
		return k;
		
	}
	
	public String updatekalendar(Kalendar kal, int id){
		Konektujse();
		String uradi="Uspjelo";
		try{
			PreparedStatement ps = (PreparedStatement) c.prepareStatement("DELETE FROM kalendar WHERE clan_id=?");
			ps.setInt(1, id);
			ps.executeUpdate();
			for(int i=0; i<kal.getbroj(); i++){
				PreparedStatement ps1 = (PreparedStatement) c.prepareStatement("INSERT INTO kalendar VALUES (NULL, ?, ?, ?, ?, ?)");
				ps1.setString(1, kal.getnaziv(i));
				ps1.setString(2, kal.getopis(i));
				java.text.SimpleDateFormat sdf =    new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String currentTime = sdf.format(kal.getod(i));
				ps1.setString(3, currentTime);
				currentTime = sdf.format(kal.getdo(i));
				ps1.setString(4, currentTime);
				ps1.setInt(5, id);
				ps1.executeUpdate();
				
			}
		}
		catch(SQLException e){
			uradi=e.getMessage();
		}
		return uradi;
	}
	
}
